// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 1503574972_extensions.down.sql (0)
// 1503574972_extensions.up.sql (121B)
// 1503575261_repos.down.sql (19B)
// 1503575261_repos.up.sql (1.009kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1503574972_extensionsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _1503574972_extensionsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503574972_extensionsDownSql,
		"1503574972_extensions.down.sql",
	)
}

func _1503574972_extensionsDownSql() (*asset, error) {
	bytes, err := _1503574972_extensionsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503574972_extensions.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __1503574972_extensionsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x70\x8d\x08\x71\xf5\x0b\xf6\xf4\xf7\x0b\x56\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x48\xce\x2c\x49\xad\x28\xb1\xe6\x22\xa4\x2e\xa3\xb8\x24\xbf\x28\x95\xb0\xba\x82\xf4\xf8\x92\xa2\xf4\x5c\x6b\x2e\x40\x00\x00\x00\xff\xff\xff\x4b\xa6\xe9\x79\x00\x00\x00")

func _1503574972_extensionsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503574972_extensionsUpSql,
		"1503574972_extensions.up.sql",
	)
}

func _1503574972_extensionsUpSql() (*asset, error) {
	bytes, err := _1503574972_extensionsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503574972_extensions.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x16, 0x9d, 0x6f, 0x40, 0x57, 0x2b, 0xce, 0x6, 0xf6, 0xba, 0x1b, 0x4f, 0x3f, 0x2f, 0xfd, 0xa5, 0xe8, 0xa9, 0xd5, 0x15, 0x21, 0xc2, 0xd4, 0x4b, 0xfa, 0xa9, 0x29, 0x8a, 0xad, 0xce, 0x4f, 0x42}}
	return a, nil
}

var __1503575261_reposDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x2a\x4a\x2d\xc8\x57\xb2\xe6\x02\x04\x00\x00\xff\xff\xdf\x86\xba\x75\x13\x00\x00\x00")

func _1503575261_reposDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503575261_reposDownSql,
		"1503575261_repos.down.sql",
	)
}

func _1503575261_reposDownSql() (*asset, error) {
	bytes, err := _1503575261_reposDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503575261_repos.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0x3b, 0x47, 0x3, 0xff, 0xfb, 0x8c, 0x7c, 0xc3, 0x89, 0x37, 0x7e, 0xe7, 0xeb, 0xa8, 0x4f, 0x44, 0xd4, 0x54, 0xc6, 0x43, 0xf, 0xdf, 0x61, 0x46, 0x60, 0x42, 0x4d, 0x20, 0xec, 0x40, 0x7c}}
	return a, nil
}

var __1503575261_reposUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xc1\x6e\xdb\x30\x0c\x86\xef\x79\x0a\x42\xa7\x14\xd8\x1b\xf4\x94\x6d\x46\x61\x2c\x73\xb7\x34\x01\xd6\x93\xa0\xc8\x8c\x4d\xd4\x96\x34\x8a\x72\xba\x3e\xfd\x60\x27\x69\x63\x27\x05\x72\xe4\xff\x7f\x14\x25\xf3\xf7\xb7\x55\xb6\x58\x67\xb0\x5e\x7c\x5d\x66\xc0\x18\x3c\xcc\x67\x00\x00\x8a\x4a\x05\x4f\xd9\x2a\x5f\x2c\xe1\xd7\x2a\xff\xb9\x58\x3d\xc3\x8f\xec\xf9\xcb\xc1\x4c\x4c\x0a\x2c\x09\xbe\xca\x51\xf1\x7b\x87\x3c\xd1\x9c\x69\x71\x22\x95\x18\x2d\x53\x10\xf2\x4e\xc1\x99\xde\xd9\x78\xa8\xa1\x78\x5c\x43\xb1\x59\x2e\x8f\x46\x2d\x12\xb4\x6d\xbc\x43\x9d\xb8\x19\xf5\xc4\x58\x7f\xe2\xd4\xbe\xc5\x60\xaa\x4b\xa3\xc4\x9d\x49\x8d\xe8\x2d\x1b\x67\xeb\xeb\x13\x1b\xe3\xaa\x64\x2a\x1c\x35\x6e\x1b\x6f\x5f\xb0\x54\xb0\xf5\xbe\x41\xe3\xde\xcf\x0b\x8c\xd6\xc8\xa5\xb3\xf3\xfc\x32\xd5\x5a\x62\xf6\x3c\x55\x03\x53\x67\x04\xa7\xb2\x65\xec\xcf\xd5\x46\x14\x08\xb5\x18\xc5\xb4\x01\xf6\x24\xf5\x50\xc2\x9b\x77\x78\xda\x46\x28\x6f\x45\x43\x8a\xf5\x6d\x64\x67\xa3\x8e\xff\x9c\xbd\x8d\x26\x57\xe2\x2b\x96\x9a\xb1\xa3\x38\x5d\xee\x8e\x11\xdf\x50\x5f\x32\xe3\x17\x7b\xa6\x8a\x9c\xee\x43\xa8\xfb\xf4\x9d\xa7\xeb\x60\x45\xe4\x8e\x2c\x2a\x20\x27\x58\x21\x8f\x5d\x13\x48\x6f\x4d\x3c\xdb\xfa\xec\xee\x7e\x36\x3b\x26\x7c\x53\xe4\xbf\x37\x19\xe4\xc5\xf7\xec\x0f\xa8\x61\x48\x62\xd2\xc9\xd1\xdf\x84\x0a\x1e\x8b\x21\xfd\xf3\xc4\x74\x77\x7f\xea\x39\x87\x0f\x61\x3e\x61\x7d\x35\x8c\xd0\xc1\x88\x20\x3b\xed\x43\xbc\xde\x38\xfc\x19\xda\xd2\x47\xf3\xa0\x7c\x3e\x65\xc4\xf6\xc2\x75\xb4\xbf\xbd\x70\xd5\xbe\xb3\xb0\x79\xca\x8b\x07\x78\xc8\x0b\x98\x37\x7e\x8f\x3c\x3c\x06\xfa\x4f\xd3\x73\xc7\x1b\xfe\x0f\x00\x00\xff\xff\xfe\x5b\xb3\xc0\xf1\x03\x00\x00")

func _1503575261_reposUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1503575261_reposUpSql,
		"1503575261_repos.up.sql",
	)
}

func _1503575261_reposUpSql() (*asset, error) {
	bytes, err := _1503575261_reposUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1503575261_repos.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xec, 0x55, 0x85, 0x23, 0xc3, 0x96, 0xb7, 0xa3, 0x3c, 0x2b, 0x66, 0x40, 0x91, 0x1b, 0x98, 0x41, 0xa8, 0x76, 0xff, 0xfb, 0xc5, 0x8d, 0xe6, 0x32, 0x8e, 0x58, 0x25, 0xc5, 0x9f, 0xa6, 0xc3, 0x92}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1503574972_extensions.down.sql": _1503574972_extensionsDownSql,

	"1503574972_extensions.up.sql": _1503574972_extensionsUpSql,

	"1503575261_repos.down.sql": _1503575261_reposDownSql,

	"1503575261_repos.up.sql": _1503575261_reposUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1503574972_extensions.down.sql": {_1503574972_extensionsDownSql, map[string]*bintree{}},
	"1503574972_extensions.up.sql":   {_1503574972_extensionsUpSql, map[string]*bintree{}},
	"1503575261_repos.down.sql":      {_1503575261_reposDownSql, map[string]*bintree{}},
	"1503575261_repos.up.sql":        {_1503575261_reposUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
